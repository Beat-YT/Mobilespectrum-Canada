stages:
- test
- build
- staging
- production

variables:
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHORT_SHA

include:
  - template: Dependency-Scanning.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Code-Quality.gitlab-ci.yml

test:jsonvalidation:
  stage: test
  image: node:14.15-buster
  allow_failure: false
  tags:
  - docker
  before_script:
  - npm install -g ajv-cli ajv-formats
  - cd ./src/data
  script:
  - ajv test -s schemas/country.schema -d "countries/*.json" -c ajv-formats --valid --verbose --all-errors
  only:
    changes:
    - src/data/**/*

test:karma:
  stage: test
  image: node:14.15-buster
  allow_failure: false
  tags:
  - docker
  before_script:
  - wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | apt-key add -
  - echo "deb http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google.list
  - DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install google-chrome-stable -y -qq
  script:
  - yarn
  - ./node_modules/@angular/cli/bin/ng test --browsers=ChromeHeadlessCI --no-watch --no-progress
  only:
    changes:
    - src/**/*
    - ./*.json
    - yarn.lock
    - .editorconfig
    - .browserslistrc

code_quality:
  artifacts:
    paths: [gl-code-quality-report.json]

build:
  stage: build
  image: docker:latest
  tags:
  - docker
  services:
    - docker:dind
  before_script:
  - sed -ri "s|\"VERSION\"|\"$CI_COMMIT_SHA\"|" src/environments/environment.prod.ts
  - sed -ri "s|"VERSION_LINK"|"$CI_COMMIT_SHORT_SHA"|g" src/app/app.component.html
  - sed -ri "s|"VERSION"|"$CI_COMMIT_SHA"|" src/app/app.component.html
  script:
  - docker build -t $TAG_COMMIT -t $TAG_LATEST .
  - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY
  - docker push $TAG_COMMIT
  - docker push $TAG_LATEST
  only:
    refs:
    - main
    changes:
    - Dockerfile
    - ./*.json
    - yarn.lock
    - .editorconfig
    - .browserslistrc
    - nginx.conf
    - src/**/*

deploy:stage:
  stage: staging
  image: alpine:latest
  tags:
  - docker
  environment:
    name: stage
    url: https://stage.mobilespectrum.org
  before_script:
  - apk add --no-cache curl  
  script:
  - echo "Deploying $CI_COMMIT_SHA to stage"
  - curl -X POST $DEPLOY_STAGE
  only:
    refs:
    - main

deploy:production:
  stage: production
  image: alpine:latest
  tags:
  - docker
  environment:
    name: production
    url: https://mobilespectrum.org
  before_script:
  - apk add --no-cache curl
  script:
  - echo "Deploying $CI_COMMIT_SHA to production"
  - curl -X POST $DEPLOY_PROD
  only:
    refs:
    - main
  when: manual
  allow_failure: false

pages:
  image: node:14.15-alpine
  before_script:
  - npm install -g @compodoc/compodoc
  script:
  - npx compodoc -p tsconfig.json -d public -n "MobileSpectrum Documentation" src
  artifacts:
    paths:
      - public
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
